[{"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\index.js":"1","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\visualization\\index.js":"2","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\contact us\\index.js":"3","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\explore microbes\\index.js":"4","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\home\\index.js":"5","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\fecth.js":"6","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\component\\footer.js":"7","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\component\\header.js":"8"},{"size":941,"mtime":1617177557028,"results":"9","hashOfConfig":"10"},{"size":5266,"mtime":1617345407708,"results":"11","hashOfConfig":"10"},{"size":3023,"mtime":1616143285351,"results":"12","hashOfConfig":"10"},{"size":10949,"mtime":1617346217246,"results":"13","hashOfConfig":"10"},{"size":3463,"mtime":1616142842682,"results":"14","hashOfConfig":"10"},{"size":709,"mtime":1617345509632,"results":"15","hashOfConfig":"10"},{"size":237,"mtime":1616142101416,"results":"16","hashOfConfig":"10"},{"size":1680,"mtime":1617165041937,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"93j7ns",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\index.js",[],["36","37"],"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\visualization\\index.js",[],"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\contact us\\index.js",[],"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\explore microbes\\index.js",["38"],"import './index.css';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Input , Select} from 'antd';\r\nimport Header from '../../component/header'\r\nimport Footer from '../../component/footer'\r\nimport Fetch from '../../fecth.js';\r\nimport { Table } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Explore =(props)=>{\r\n    const { name , column ,init , text} = props\r\n    const [res, setRes] = useState(0);\r\n    const [data, setData] = useState([]);\r\n    const [type, setType] = useState(init);\r\n    const [columns, setColumns] = useState([]);\r\n    const onSearch = (value) => {\r\n        if(name === \"MicrobeKG\"){\r\n            Fetch(`search/microbe?search_type=${type}&query=${value}&limit=${1000}&page=${0}`,`GET`)\r\n                .then((response) => {\r\n                    setRes(1);\r\n                    if(type === 'data'){\r\n                    setData(response?.data?.map((item,index) =>(\r\n                        {\r\n                            key:index,\r\n                            BacName: item.bacname,\r\n                            ModuleName: item.modulename,\r\n                            CompoundName: item.compoundname,\r\n                            Mount: item.mount,\r\n                            Unit: item.unit,\r\n                            FoodName: item.foodname,\r\n                            FoodId: item.foodid\r\n                        }\r\n                    )))}\r\n                    else if(type === 'text')\r\n                        setData(response?.data?.map((item, index) => (\r\n                            {\r\n                                key: index,\r\n                                BacName:  item.bacname,\r\n                                Bac2Name: {\r\n                                    name: item.bac2name,\r\n                                    ref: item.ref2\r\n                                },\r\n                                Bac3Name: {\r\n                                    name: item.bac3name,\r\n                                    ref: item.ref3\r\n                                },\r\n                                Bac4Name: {\r\n                                    name: item.bac4name,\r\n                                    ref: item.ref4\r\n                                },\r\n                                Disname: {\r\n                                    name: item.disname,\r\n                                    ref: item.reference\r\n                                },\r\n                                Reference: item.reference,\r\n                                Ref2: item.ref2,\r\n                                Ref3: item.ref3,\r\n                                Ref4: item.ref4\r\n                            }\r\n                        ))) \r\n                })\r\n        }else{\r\n            Fetch(`search/mdepression?search_type=${type}&query=${window.btoa(value)}&limit=${1000}&page=${0}`,`GET`)\r\n            .then((response) =>{\r\n                setRes(1);\r\n                if(type === 'diseases'){\r\n                    setData(response?.data?.map((item, index) => ({\r\n                        key: index,\r\n                        MDD: 'Major depressive disorder',\r\n                        Bacteria: item.bacname,\r\n                        Relevant_Disease: {\r\n                            name:item.relevant_disease,\r\n                            ref: item.syndrome\r\n                        },\r\n                        Type: item.type\r\n                    })))\r\n                }else{\r\n                    setData(response?.data?.map((item, index) => ({\r\n                        key: index,\r\n                        MDD: 'Major depressive disorder',\r\n                        Bacteria: item.bacname||'NULL',\r\n                        Compound: item.compoundname,\r\n                        Food: item.food,\r\n                        Type: item.type\r\n                    })))\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const handleChange = (value) => {\r\n       setType(value) \r\n    } \r\n \r\n    useEffect(() =>{\r\n        if(type === 'data' || type === 'diseases'){\r\n            setColumns(column[0])\r\n        }\r\n        else{\r\n            setColumns(column[1])\r\n        }\r\n        setData([])\r\n    },[type])\r\n\r\n    function onChange(pagination, filters, sorter, extra) {\r\n        console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    const {Search} = Input\r\n    const {Option} = Select\r\n    return (\r\n        <div className=\"body\">\r\n            <Header title={name}></Header>\r\n            <main>\r\n                <div className=\"container\">\r\n                    <div className=\"title\">EXPLORE {name === \"MicrobeKG\" ?\"MICROBES\":\"DEPRESSION\"}</div>\r\n                    <div className=\"context\">{text}\r\n                    </div>\r\n                    {name === \"MicrobeKG\" ? <Select defaultValue=\"text\" className=\"select\" onChange={handleChange}>\r\n                        <Option value=\"text\">Text Mining</Option>\r\n                        <Option value=\"data\">Data fusion</Option>\r\n                    </Select>:\r\n                        <Select defaultValue=\"diseases\" className=\"select\" onChange={handleChange}>\r\n                            <Option value=\"diseases\">Diseases</Option>\r\n                            <Option value=\"food\">Food</Option>\r\n                        </Select>\r\n                    }\r\n                    <Search className=\"filter\" \r\n                    placeholder=\"Enter a filter term\"\r\n                    onSearch={onSearch}\r\n                    ></Search>\r\n                    {!res?<div className=\"noneresult\">\r\n                        There is no result for the search.\r\n                    </div>:\r\n                        <Table columns={columns} pagination={{ pageSize: 5 }} dataSource={data} onChange={onChange} className=\"result\"></Table>}\r\n                </div>\r\n            </main>\r\n            <Footer></Footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Index = ({ match }) => {\r\n    const { name } = match.params\r\n    const columnMicrobe = [[{\r\n        title: 'BacName',\r\n        dataIndex: 'BacName',\r\n        render: (names) => <Link to={{pathname: `/visualization/${name}`,state:{nodeName : names}}} >{names}</Link>\r\n    },\r\n        {\r\n            title: 'ModuleName',\r\n            dataIndex: 'ModuleName',\r\n            sorter: {\r\n                compare: (a, b) => a.ModuleName - b.ModuleName,\r\n                multiple: 3,\r\n            },\r\n            render: (names) => <Link to={{ pathname: `/visualization/${name}`, state: { nodeName: names } }} >{names}</Link>\r\n        },\r\n        {\r\n            title: 'CompoundName',\r\n            dataIndex: 'CompoundName',\r\n            sorter: {\r\n                compare: (a, b) => a.CompoundName - b.CompoundName,\r\n                multiple: 2,\r\n            },\r\n            render: (names) => <Link to={{ pathname: `/visualization/${name}`, state: { nodeName: names } }} >{names}</Link>\r\n        },\r\n        {\r\n            title: 'Mount',\r\n            dataIndex: 'Mount',\r\n            sorter: {\r\n                compare: (a, b) => a.Mount - b.Mount,\r\n                multiple: 1,\r\n            },\r\n        },\r\n        {\r\n            title: 'Unit',\r\n            dataIndex: 'Unit',\r\n            sorter: {\r\n                compare: (a, b) => a.Unit - b.Unit,\r\n                multiple: 1,\r\n            },\r\n        },\r\n        {\r\n            title: 'FoodId',\r\n            dataIndex: 'FoodId',\r\n            sorter: {\r\n                compare: (a, b) => a.FoodId - b.FoodId,\r\n                multiple: 1,\r\n            },\r\n        },\r\n        {\r\n            title: 'FoodName',\r\n            dataIndex: 'FoodName',\r\n            sorter: {\r\n                compare: (a, b) => a.FoodName - b.FoodName,\r\n                multiple: 1,\r\n            },\r\n            render: (names) => <Link to={{ pathname: `/visualization/${name}`, state: { nodeName: names } }} >{names}</Link>\r\n        },], [{\r\n            title: 'BacName',\r\n            dataIndex: 'BacName',\r\n        },\r\n            {\r\n                title: 'Bac2Name',\r\n                dataIndex: 'Bac2Name',\r\n                sorter: {\r\n                    compare: (a, b) => a.Bac2Name - b.Bac2Name,\r\n                    multiple: 3,\r\n                },\r\n                render: (obj) => <a href={obj.ref}>{obj.name}</a>,\r\n            },\r\n            {\r\n                title: 'Bac3Name',\r\n                dataIndex: 'Bac3Name',\r\n                sorter: {\r\n                    compare: (a, b) => a.Bac3Name - b.Bac3Name,\r\n                    multiple: 2,\r\n                },\r\n                render: (obj) => <a href={obj.ref}>{obj.name}</a>,\r\n            },\r\n            {\r\n                title: 'Bac4Name',\r\n                dataIndex: 'Bac4Name',\r\n                sorter: {\r\n                    compare: (a, b) => a.Bac4Name - b.Bac4Name,\r\n                    multiple: 1,\r\n                },\r\n                render: (obj) => <a href={obj.ref}>{obj.name}</a>,\r\n            },\r\n            {\r\n                title: 'Disname',\r\n                dataIndex: 'Disname',\r\n                sorter: {\r\n                    compare: (a, b) => a.Disname - b.Disname,\r\n                    multiple: 1,\r\n                },\r\n                render: (obj) => <a href={obj.ref}>{obj.name}</a>,\r\n            },]];\r\n    const textMicrobe = \"The following two parts of the data query are text mining and data fusion.Give a bacteria name to get the results.\"\r\n    const textDepression =\"The following two parts of the data query are concurrent diseases and nutrition food. Giving a standard term can get the results.\"\r\n    const columnDepression = [\r\n        [{\r\n        title: 'MDD',\r\n        dataIndex: 'MDD',\r\n    },{\r\n        title: 'Bacteria',\r\n        dataIndex: 'Bacteria',\r\n        render: (names) => <Link to={{ pathname: `/visualization/${name}`, state: { nodeName: names } }} >{names}</Link>\r\n\r\n    },{\r\n        title: 'Relevant Disease',\r\n        dataIndex: 'Relevant_Disease',\r\n            render: (obj) => <a href={obj.ref} target=\"_blank\" rel=\"noopener norefer noreferrer\">{obj.name}</a>,\r\n    },{\r\n        title: 'Type',\r\n        dataIndex: 'Type',\r\n    }],\r\n    [{\r\n        title: 'MDD',\r\n        dataIndex: 'MDD',\r\n    },{\r\n        title: 'Bacteria',\r\n        dataIndex: 'Bacteria',\r\n        render: (names) => (names ===\"NULL\"? \"NULL\" :<Link to={{ pathname: `/visualization/${name}`, state: { nodeName: names } }} >{names}</Link>)\r\n    },{\r\n        title: 'Compound',\r\n        dataIndex: 'Compound',\r\n        render: (names) => <Link to={{ pathname: `/visualization/${name}`, state: { nodeName: names } }} >{names}</Link>\r\n    },{\r\n        title: 'Food',\r\n        dataIndex: 'Food'\r\n    }, {\r\n        title: 'Type',\r\n        dataIndex: 'Type',\r\n    }]];\r\n    return(\r\n        <>\r\n     {\"MicrobeKG\" === name ? \r\n        <Explore name={name} column={columnMicrobe} init = \"text\" text = {textMicrobe} /> \r\n     : \r\n     <Explore name={name} column ={columnDepression} init = \"diseases\" text = {textDepression}/>\r\n    }</>\r\n    )\r\n}\r\n\r\nexport default Index;","D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\pages\\home\\index.js",[],"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\fecth.js",[],"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\component\\footer.js",[],"D:\\muxi\\NLPMicrobeKG-frontend\\NLPMicrobeKG\\src\\component\\header.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":102,"column":7,"nodeType":"45","endLine":102,"endColumn":13,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'column'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [column, type]",{"range":"52","text":"53"},[4160,4166],"[column, type]"]